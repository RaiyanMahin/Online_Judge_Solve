#include <bits/stdc++.h>
using namespace std;
//using namespace __gnu_pbds;

#define FIO ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0)

using ll = long long ;
using ld = long double;

using ull = unsigned long long int;

// Defines

#define pf printf
#define sf scanf
#define F first
#define S second
#define gcd(a, b)  __gcd(a, b)
#define lcm(a, b)  (a * b) / ( __gcd(a, b ) )
#define pb emplace_back
#define nn "\n"

#define yes cout << "YES" << endl
#define no cout << "NO" << endl
#define p_case(r)  cout << "Case " << r++ << ": "
#define all(a) a.begin(), a.end()
#define Sort sort(a.begin(), a.end())
#define Rev_sort(a) reverse(a.begin(), a.end())
#define RSort(a) sort(a.rbegin(), a.rend()) // sort by descending
#define mem(a, b) memset(a, b, sizeof(a) )
#define acum(a , init_value) accumulate(all(a),init_value) // 0LL
#define setpre(x) cout << fixed << setprecision(x)
#define loop(i, b, n) for(ll i = b; i <= n; i++)
#define rev_loop(i, b, n) for(ll i = b; i >= n; i--)
#define odd(n) ((n)&1)
#define even(n) (!((n)&1))
#define sz(x) (ll)x.size()
//using return = rr;


mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

// typedefs

typedef pair < ll ,ll > pll;
typedef pair < ld, ld > pld;


// Constants
//ll MOD = 1000000007;
ll inf = 1e18;
const double PI = acos(-1);
const double eps = 1e-9;

/*  DEBUG */

#define debug(x) cerr << # x << ' ' << x << endl;

/*     */



int fx[]={1, -1, 0, 0};
int fy[]={0, 0, 1, -1};
int dx[]={0, 0, 1, -1, -1, 1, -1, 1}; // diagonals with
int dy[]={-1, 1, 0, 0, 1, 1, -1, -1};


bool checkBit(ll n, ll i) { return (n&(1LL<<i)); }
ll setBit(ll n, ll i) { return (n|(1LL<<i)); }
ll resetBit(ll n, ll i) { return (n&(~(1LL<<i))); }


/*  ll ans = accumulate(a.begin(), a.end(), 1LL , multiplies <ll > ()); */

// Important Functions

///degree angle
double deg(double x) {  return ( (180.0 * x) / PI ); }

/// radian return
double rad(double x) { return (( x * (double)PI ) / (180.0) ); }
const ll MOD = 998244353;

ll toInt(string s){ ll  sm ; stringstream ss(s); ss >> sm; return sm;}
ll Ceil(ll a, ll b) {  return (a + b - 1) / b; } // a large, b small
inline bool EQ(double a, double b) { return fabs(a-b) < 1e-9; }
inline bool isLeapYear(ll year) { return (year%400==0) || (year%4==0 && year%100!=0); }
inline void normal(ll &a) { a %= MOD; (a < 0) && (a += MOD); }
//inline ll normal(ll a) { a %= MOD; (a < 0) && (a += MOD); return a; }
inline ll modMul(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a*b)%MOD; }
inline ll modAdd(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a+b)%MOD; }
inline ll modSub(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); a -= b; normal(a); return a; }
inline ll modPow(ll b, ll p) { ll r = 1; while(p) { if(p&1) r = modMul(r, b); b = modMul(b, b); p >>= 1; } return r; }
inline ll modInverse(ll a) { return modPow(a, MOD-2); }
inline ll modDiv(ll a, ll b) { return modMul(a, modInverse(b)); }
inline bool isSquare(ll x) 				{ ll s = sqrt(x);	return (s*s==x); }
inline bool isFib(ll x) 				{ return isSquare(5*x*x+4)|| isSquare(5*x*x-4); }
//inline bool isPowerOfTwo(ll x)			{ return ((1LL<<(ll)log2(x))==x); }
inline bool isPowerOfTwo(ll x)			{ return (( x & (x - 1)) == 0 )  ; }
// if((number & (number - 1)) == 0)


/*    */

/*     STRING
       size_t found = s.find(i);
       if(found == string::npos)
*/

/*     for(; i<n ; j<n , i+=2 , j+=2)
*/


map < ll, ll > mp;

void baal()
{
    mp.clear();
    ll n; cin >> n; vector < ll > a(n, 0);
   
    

    /*
    
    amr ta hoisilo e bhul krsi
    ja ta holo
    1,2,3,4,5,6,7,8
    ekhn (i * j <= 30 dhor)
    4 * 8 == 32 krtesi tkhn full 2 ta loop thekei break krsi
    but erpr 5 * 6 == 30 ta ache
    to eirokom onk guli e possible
    bki shob thik e silo 
    LOSER
    */



    for(ll i = 0; i < n; i++)
    {
        cin >> a[i];

        mp[ a[i]  ] = i + 1;


    }
    vector < ll > b = a;

    sort(all(b));
    ll MX = n + (n - 1); // MX ato index e possible
    
    ll got = 0, fft = 0;

    for(ll i = 0; i < n; i++)
    {
        
        for(ll j = i + 1; j < n; j++)
        {
            if(b[i] * b[j] <= MX)
            {
                ll i_ache = mp[ b[i] ], j_ache = mp[ b[j] ];

                if( (i_ache + j_ache) == (b[i] * b[j]))
                {
                    fft++;
                } 
            }
            else 
            {
              //  got = -1;
                break;
            }

        }
        
    }
    cout << fft << nn; return;



    











    // for(ll i = 1; i <= n; i++)
    // {
    //     for(ll j = i + 1; j <= n; j++)
    //     {
    //         if((i + j) == (a[i] * a[j]))
    //         {
    //             op++;

    //             cout << " i = " << i << " j = " << j << nn;
    //             cout << " a[i] = " << a[i] << " aj = " << a[j] << nn;
    //         }
    //         if((i + j) <  (a[i] * a[j]))
    //         {
    //             cout << " boro \n";
    //             cout << " i = " << i << " j = " << j << nn;
    //             cout << " a[i] = " << a[i] << " aj = " << a[j] << nn;

    //             break;

    //         }
    //     }
    // }
    // cout << op << nn; return;






}


int main()
{

   //cout << 'k' - 'a';
   // ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);



   ll t; cin >> t;
   while(t--)
        baal();
}

