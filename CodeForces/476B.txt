#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

/* last update : 26 5 23 -> 8 : 41 pm */

using namespace std;
using namespace __gnu_pbds;

using ll = long long ;
using ld = long double;
using ull = unsigned long long int;

// Defines

#define pf printf
#define sf scanf
#define F first
#define S second
#define gcd(a, b)  __gcd(a, b)
#define lcm(a, b)  (a * b) / ( __gcd(a, b ) )
#define pb emplace_back
#define nn "\n"
#define yes cout << "YES" << endl
#define no cout << "NO" << endl
#define p_case(r)  cout << "Case " << r++ << ": "
#define all(a) a.begin(), a.end()
#define Sort sort(a.begin(), a.end())
#define Rev_sort(a) reverse(a.begin(), a.end())
#define RSort(a) sort(a.rbegin(), a.rend()) // sort by descending
#define mem(a, b) memset(a, b, sizeof(a) )
#define acum(a , init_value) accumulate(ALL(a),init_value) // 0LL
#define setpre(x) cout << fixed << setprecision(x)
#define loop(i, b, n) for(ll i = b; i <= n; i++)
#define rev_loop(i, b, n) for(ll i = b; i >= n; i--)
#define odd(n) ((n)&1)
#define even(n) (!((n)&1))
#define sz(x) (ll)x.size()
#define toDecimal(s) bitset<64>(s).to_ullong()
#define toBinaryStr(n) bitset<64>(n).to_string()
#define toBinary(n) stoll(bitset<64>(n).to_string())


// Constants
ll MOD = 1000000007;
ll inf = 1e18;
const double PI = acos(-1);
const double eps = 1e-9;

/*  DEBUG */

#define debug(x) cerr << # x << ' ' << x << endl;

/*     */

int fx[]={1, -1, 0, 0};
int fy[]={0, 0, 1, -1};
int dx[]={0, 0, 1, -1, -1, 1, -1, 1}; // diagonals with
int dy[]={-1, 1, 0, 0, 1, 1, -1, -1};

/*
bool checkBit(int n, int i) { return (n&(1<<i)); }
int setBit(int n, int i) { return (n|(1<<i)); }
int resetBit(int n, int i) { return (n&(~(1<<i))); }
*/

/*  ll ans = accumulate(a.begin(), a.end(), 1LL , multiplies <ll > ()); */

// Important Functions

///degree angle
double deg(double x) {  return ( (180.0 * x) / PI ); }

/// radian return
double rad(double x) { return (( x * (double)PI ) / (180.0) ); }

ll toInt(string s){ ll  sm ; stringstream ss(s); ss >> sm; return sm;}
ll Ceil(ll a, ll b) {  return (a + b - 1) / b; } // a large, b small
inline bool EQ(double a, double b) { return fabs(a-b) < 1e-9; }
inline bool isLeapYear(ll year) { return (year%400==0) || (year%4==0 && year%100!=0); }
inline void normal(ll &a) { a %= MOD; (a < 0) && (a += MOD); }
//inline ll normal(ll a) { a %= MOD; (a < 0) && (a += MOD); return a; }
inline ll modMul(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a*b)%MOD; }
inline ll modAdd(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a+b)%MOD; }
inline ll modSub(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); a -= b; normal(a); return a; }
inline ll modPow(ll b, ll p) { ll r = 1; while(p) { if(p&1) r = modMul(r, b); b = modMul(b, b); p >>= 1; } return r; }
inline ll modInverse(ll a) { return modPow(a, MOD-2); }
inline ll modDiv(ll a, ll b) { return modMul(a, modInverse(b)); }
inline bool isSquare(ll x) 				{ ll s = sqrt(x);	return (s*s==x); }
inline bool isFib(ll x) 				{ return isSquare(5*x*x+4)|| isSquare(5*x*x-4); }
//inline bool isPowerOfTwo(ll x)			{ return ((1LL<<(ll)log2(x))==x); }
inline bool isPowerOfTwo(ll x)			{ return (( x & (x - 1)) == 0 )  ; }
// if((number & (number - 1)) == 0)


/*    */

/*     STRING
       size_t found = s.find(i);
       if(found == string::npos)
*/

/*     for(; i<n ; j<n , i+=2 , j+=2)
*/
bool isAlphaNumeric(char x) {
    if(65<=x && x<=90)          //Capitals
        return 1;
    else if(97<=x && x<=122)    //Small
        return 1;
    else if(48<=x && x<=57)     //Numbers
        return 1;
    else
        return 0;
}

/***
/// BUILTIN FUNCTIONS OF GCC COMPILER
__builtin_popcount(x) == for setbits of any number
__builtin_parity(x) == return true if number has odd parity , else return 0 if number has even parity
__builtin_clz(x) == count the leading zeros of int64_t. before the 1st occurrence of 1 (set bit)
***/


/***   string er sob substring  ***/   // VERY IMPORTANT
/* n = s.size();
 for (int i = 0; i < n; i++)
        for (int len = 1; len <= n - i; len++)
            cout << s.substr(i, len) << endl;

*/

/*    STRING transform()
lower to uppercase()
transform(s.begin(), s.end(), s.begin(), ::toupper);
aaa -> AAA

transform(s.begin(), s.end(), s.begin(), ::tolower);
AAA ->  aaa */

string WithOut_Gap_New_String(string str)
{
    stringstream ss(str);
    string temp;
    str = "";
    while(getline(ss, temp , ' '))
    {
        str = str + temp;
    }

    return str;
}
// last digit of any number = n % 10;

// vector pair sorting compare
bool reversesort(const pair<ll,ll> &a, const pair<ll,ll> &b)
{
    return (a.second > b.second);
}


bool isprime(ll n)
{
    if(n < 2) return false;
    if(n == 2) return true;
    if(even(n) and n > 2) return false;
    // n odd n > 1
    for(ll i = 2; i * i <= n; i++)
    {
        if(n % i == 0) return false;
    }
    return true;
}

/*******************  ---------------      END OF TEMPLATE --------------      *************************/


// PBDS

template <class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <class T> using multi_ordered_set = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <class T> using r_ordered_set = tree<T, null_type, greater<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <class T> using r_multi_ordered_set = tree<T, null_type, greater_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
// ordered_set<ll> s;
// s.order_of_key(k); --> number of items strictly smaller than k
// s.find_by_order(k); --> k-th item in set (0-indexing) (returns iterator)

typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> os;
// find_by_order(k) – ফাংশনটি kth ordered element এর একটা পয়েন্টার রিটার্ন করে। অর্থাৎ তুমি চাইলেই kth ইন্ডেক্সে কি আছে, সেটা জেনে ফেলতে পারছো!
// order_of_key(x) – ফাংশনটি x এলিমেন্টটা কোন পজিশনে আছে সেটা বলে দেয়।
//*//**___________________________________________________**/

ll TEMPLATE()
{
    /// 1. n array size, then array input

    /// 2. n string size, then string input

    /// 3. only string, then size

    /// 4. nn menas "\n";

    /**
    ll n; cin >> n; vector < ll > a(n , 0);
    for(ll &i : a) cin >> i;


    ll n; cin >> n; string s; cin >> s;

    string s; cin >> s; ll n = sz(s);

    cout << endl; return;

    **/
}

set < string > vs;

queue < string > q;

vector < string > a;


void baal()
{
    string s, t; cin >> s >> t;
    ll x = 0;
    for(char i : s)
    {
        if(i == '+') x++;
        else x--;
    }

    q.push(t); vs.insert(t);

    while(!q.empty())
    {
        string s = q.front(); q.pop();

        for(ll i = 0; i < sz(s); i++)
        {
            if(s[i] == '?')
            {
                string s1 = s, s2 = s;

                s1[i] = '0'; s2[i] = '1';

                q.push(s1); q.push(s2);
                vs.insert(s1); vs.insert(s2);
                break;
            }
        }
        


    }

    for(auto i : vs)
    {
        string s = i;
        ll cn = count(all(s), '?');

        if(cn == 0)
        {

            for(ll j = 0; j < sz(s); j++)
            {
                if(s[j] == '0') s[j] = '-';
                else if(s[j] == '1') s[j] = '+';
            }



            a.push_back(s);
        }
    }
    // cout << sz(a) << nn;
    // for(auto i : a) cout << i << nn;

    ll u = sz(a), fft = 0;

    for(auto i : a)
    {
        string s = i;

        ll xx = 0;

        for(ll in = 0; in < sz(s); in++)
        {
            if(s[in] == '+') xx++;
            else if(s[in] == '-') xx--;
        }

        if(xx == x)
        {
            fft++;
        }

        
    }

    ld Ans = (ld)( (fft * 1.0) / (u * 1.0) );

    setpre(20) << Ans << nn;



    return;
}

int main()
{
    ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
    ll t = 1; //cin >> t;
    while(t--) baal();
}
